/*
  Matthew Ludwig
  May 25 2018
  This program accepts mark values, and it sorts them into order. It -
  also calculate the average, minimum, maximum and range of marks.
 */
package marks;

/**
 *
 * @author malud0519
 */
import java.util.*;
import java.text.*;
public class marks extends javax.swing.JFrame {

    /**
     * Creates new form marks
     */
    ArrayList <Integer> marks = new ArrayList(); // declares arraylist
    public marks() {
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        marksBox = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        gradeBox = new javax.swing.JTextArea();
        sortButton = new javax.swing.JButton();
        analyzeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputMark = new javax.swing.JTextField();
        addbutton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exitProgram = new javax.swing.JMenuItem();
        restartProgram = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        marksBox.setColumns(20);
        marksBox.setRows(5);
        jScrollPane1.setViewportView(marksBox);

        gradeBox.setColumns(20);
        gradeBox.setRows(5);
        jScrollPane2.setViewportView(gradeBox);

        sortButton.setText("Sort Marks");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        analyzeButton.setText("Analyze ");
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Marks Program");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Student Mark(%)");

        addbutton.setText("Add");
        addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbuttonActionPerformed(evt);
            }
        });

        jMenu1.setText("Help");

        exitProgram.setText("Exit Program");
        exitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitProgramActionPerformed(evt);
            }
        });
        jMenu1.add(exitProgram);

        restartProgram.setText("Reset Program");
        restartProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartProgramActionPerformed(evt);
            }
        });
        jMenu1.add(restartProgram);

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(sortButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(analyzeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(inputMark, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(addbutton)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputMark, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addbutton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortButton)
                    .addComponent(analyzeButton))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * 
     * @return sum 
     * Sum is used as the return value from the method: classAverage
     * This method determines the total sum of the grades
     */
    public double classAverage () {
        int sum = 0;
        for (int i = 0; i < marks.size(); i++)
        {
            sum += marks.get(i);
        }
        return sum;
        // for loop iterates until variable i is equal to the size of the ArrayList
    }
    private int classMaximum () {
        int max = Collections.max(marks);
        return max;   // maximum method
    }
    private int classMinimum () {
        int min = Collections.min(marks); // minimum method
        return min;
    }
   /* private int gradeLevel() {
    attempt: int [] grade = new int[5]
    for (int i = 0; i < marks.size(); i++) {
    grade[i] += marks.get();  
    }
   */
    private void exitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitProgramActionPerformed
        System.exit(0); // Exit command
    }//GEN-LAST:event_exitProgramActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
    // sorts the numbers ascending from least to greatest
    Collections.sort(marks);
    marksBox.setText(null);
    for (int i = 0; i < marks.size(); i++) {

        marksBox.setText(marksBox.getText() + marks.get(i) + "\n"); 
        }
    }//GEN-LAST:event_sortButtonActionPerformed

    private void addbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbuttonActionPerformed
    if (Integer.parseInt(inputMark.getText()) >= 0 && Integer.parseInt(inputMark.getText()) <= 100) {
        marks.add(Integer.parseInt(inputMark.getText())); // adds the values to the int ArrayList  
        for (int i = 0; i < marks.size(); i++) {  
            marksBox.setText(""); // clears text area before and after each "set text" statement
            inputMark.setText("");          
                for (int x = 0; i < marks.size(); x++ ) {
                   marksBox.setText(marksBox.getText() + marks.get(x) + "\n");
                }
            }
        }  
    else {
        marksBox.setText("\n" + "Error: invalid mark");
        marks.remove(marks.size()-1); // removes the last entered number in the ArrayList
        inputMark.setText("");
        }
    /* this method will add the values to the arraylist each time the add button is clicked
       then, the values are sent to the left text area (marksBox)
    */
    }//GEN-LAST:event_addbuttonActionPerformed

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        double average = classAverage() / marks.size();
        DecimalFormat x = new DecimalFormat ("##.#");
        int range = classMaximum() - classMinimum();
        gradeBox.setText("Class Average: " +x.format (average) + "%" + "\n" + "Maximum Mark: " + classMaximum() + "\n" + "Minimum Mark: " + classMinimum() + "\n" + "Range: " + range);
    }//GEN-LAST:event_analyzeButtonActionPerformed

    private void restartProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartProgramActionPerformed
    if(evt.getSource() == restartProgram)
    {
        dispose();
        marks reset = new marks();
        reset.setVisible(true);
    }
     // resets the program
    }//GEN-LAST:event_restartProgramActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new marks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbutton;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JMenuItem exitProgram;
    private javax.swing.JTextArea gradeBox;
    private javax.swing.JTextField inputMark;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea marksBox;
    private javax.swing.JMenuItem restartProgram;
    private javax.swing.JButton sortButton;
    // End of variables declaration//GEN-END:variables
}
